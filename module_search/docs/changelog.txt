Module Search

V4.6 ----------------------------------------------------------------------------------------------------
NEW: module_search | deferred indexer -> added an optional workflow used for a deferred indexing of objects. if the workflow-engine is installed and running, deferred indexing of objects reduces the complexity of direct object updates and deletions, boosting the systems' perfomance
NEW: module_search | installer -> the index is updated only once for update sequences spanning over more than one version
NEW: module_search | index rebuild task -> rebuilding the search index shows a progress bar and in-process information
BUG: module_search | analyzer -> lowerize function now uses uniStrLower (this caused problems in windows system if string contains utf8 characters)
BUG: module_search | search_ajax_small.tpl -> the result-container was shown for empty results (or to short queries), too. is now hidden completely if there's no content [ticket #909]

V4.5 ----------------------------------------------------------------------------------------------------
NEW: module_search | search_result -> the result contains the query itself, too [ticket #900]
NEW: module_search | interface_search_portalobject -> changed the semantic of the updateSearchResult method. If necessary, the method may return an array of results instead of only updating the passed result object. This makes sure linked contents (such as media-files or faqs) are found on all sites [ticket #900]
NEW: module_search | portal search -> added a new interface interface_search_portalobject, used to fetch the content lang and to set the index-entry as valid for portal-searches [ticket #900]
NEW: module_search | indexer -> a full index rebuild avoids useless delete queries
NEW: module_search | indexer -> the contents of a single document are added with a single insert, no longer separate ones
NEW: module_search | indexer -> started implementing a conditional object indexer, only usable in combination with the change-history. validates if an object changed and triggers the search-index update only on changed objects
NEW: module_search | indexer -> indexObject got a new param "bitForce", used to force the indexing of an object (e.g. when updating the complete index)
BUG: module_search | indexer -> The indexer keeps numerical values even if shorter then the minimal word length (currently two). otherwise numbers (e.g. an event-number) won't be indexed if lower then 100. The removeShortText logic is located directly in tokenize() [ticket #892]
BUG: module_search | indexedsearch -> the view permissions of a results' module are validated, too
BUG / SECURITY: module_search | portal-js -> fixed a possible xss injection, the search param is now included htmlencoded an no longer as plaintext

V4.4.1 --------------------------------------------------------------------------------------------------
BUG / SECURITY: portal-js -> fixed a possible xss injection, the search param is now included htmlencoded an no longer as plaintext

V4.4 ----------------------------------------------------------------------------------------------------
NEW: in order to be included into a (backend) search result, the view-permission of the record and the view-permission of the matching module are required
NEW: reintegrated the fastsearch branch. contains a new, index-based search for the backend. therefore each object is indexed during updates. each property to index is marked with @addSearchIndex. #825 all credits go to tkiefer!
NEW: first part of indexed search (term and boolean queries, manual index build)
NEW: search support MustNot parameter syntax -welt
NEW: results ordered by indexed search score
NEW: simple systemtask to rebuild the search index
NEW: search by field filter in boolean queries (example: +open +title:kajona)
NEW: added a new event "recordUpdated", triggered each time a record is - you may guess it - updated
NEW: on update, object are indexed automatically
NEW: the search-index is cleaned on object removals. Implemented by listening to record deleted events.
NEW: added a new event "objectIndexed". classes implementing this interface are notified if an object is added / updated to the index and may add additional content to the source-obejcts' index. Implemented the callback for module tags.
NEW: index saves word count as score
NEW: term query use saved word count for scoring
NEW: sort-results are ordered by the score automatically. the manual sorting is no longer required.
NEW: class_module_search_metadata_filter is able to generate the filter-query on its own
NEW: the system-table joins are only created if a metadata-filter is set up
NEW: added a count-method to the query-interface
NEW: added a real paging to the search result list (reducing the number of object instantiations)
NEW: only documents with at least one content-entry are added to the document-index, empty documents are skipped
NEW: removed the backend search plugins. no longer required, search is index-based


V4.3 ----------------------------------------------------------------------------------------------------
NEW: introduced a new interface "interface_search_resultobject". Currently used to grant objects the possibility to generate the on-click urls for search-results themselves. If not implemented, the entry is added with a generic edit-action. If this isn't sufficient, implement the interface and decide on your own which url you want to return. #832
BUG: for objects with no string-based properties, the generic backend search could fail due to an erroneous sql query
BUG: fixed the admin / portal element search plugins to build the queries against the new annotation based elements

V4.2 ----------------------------------------------------------------------------------------------------
NEW: refactored the highlighting of search-phrases. now js-based an no longer generated on the server-side. #794
BUG: fixed search queries for float-values on postgres (aka ignoring them)
BUG: the xml-results skipped the system-id for some detailed pages when generating links, e.g. for news-entries