<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================

     Kajona Head Build
     Buildfile to perform additional actions such as phpunit-tests generation, ...
     Called by the buildserver, so change with care :)
     This file is created for Jenkins but may be called from the CLI, too.

     This build-file may be migrated to phing, feel free to start the migration

     Author: sidler
     ====================================================================== -->
<project name="Kajona Head Build" default="buildSqliteFast" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

    <description>
        Buildfile to run common tasks.
        This buildfile is meant to be run on a SVN development snapshot, so NOT on a real project.
        The buildfile expects all modules to be checked out located at /core.
    </description>

    <!--
         CONFIG VALUES BELOW
     -->

    <!-- setting windows specific properties-->
    <condition property="script-suffix" value=".bat" else="">
        <os family="windows" />
    </condition>
    <condition property="script-suffix-cmd" value=".cmd" else="">
        <os family="windows" />
    </condition>
    <condition property="isWindows" value="true">
        <os family="windows" />
    </condition>

    <!-- target dir for the sources from the svn repo -->
    <property name="sourcesPath"  value="/../../" />
    <!-- target dir to install the system to. this folder is also referenced in the phpunit config file! -->
    <property name="projectPath"  value="/buildproject" />
    <!-- artifacts such as logs and reports will be stored here -->
    <property name="buildPath"    value="/build" />
    <!-- js tests and node tasks -->
    <property name="jsPath"    value="/jstests" />
    <!-- generated zips will be placed here (full, light) -->
    <property name="packagesPath" value="/packages" />
    <!-- temp-folder, required to build the packages -->
    <property name="tempPath"     value="/temp/kajona" />
    <!-- composer-folder, required for composer dependcy management -->
    <property name="composerPath"     value="/composer" />
    <!-- path to the composer binaries -->
    <property name="composerBinariesPath" value="${basedir}/composer/vendor/bin" />
    <!-- npm local cache registry -->
    <property name="npmLocalRegistry" value="http://packages.artemeon.int:4873/" />


    <!-- path to composer -->
    <property name="path.composer"  value="composer${script-suffix}" />
    <!-- path to node -->
    <property name="path.node"      value="node" />
    <!-- path to npm -->
    <property name="path.npm"       value="npm${script-suffix-cmd}" />
    <!-- path to phpunit -->
    <property name="path.phpunit"   value="${composerBinariesPath}/phpunit${script-suffix}" />
    <!-- path to phpcs -->
    <property name="path.phpcs"     value="${composerBinariesPath}/phpcs${script-suffix}" />
    <!-- path to phpmd -->
    <property name="path.phpmd"     value="${composerBinariesPath}/phpmd${script-suffix}" />
    <!-- path to php -->
    <property name="path.php"       value="php" />


    <!--
             No need to change anything below!
     -->

    <!-- internal initialization -->
    <target name="init" depends="cleanFilesystem,installBuildDependencies">
        <tstamp />
    </target>

    <target name="buildSqliteFast" depends="
		    								init,
					    					buildProject, installProjectSqlite,
					    					runFastTests,
					    					buildFullZip, postBuildWorkspaceClean" />


    <target name="buildSqliteFull" depends="
		    								init,
					    					buildProject, installProjectSqlite,
					    					runFullTests,
					    					buildFullZip, postBuildWorkspaceClean" />

    <target name="buildMysql" depends="
		    								init,
					    					buildProject, installProjectMysql,
					    					runFastTests, postBuildWorkspaceClean" />

    <target name="buildOracle" depends="
		    								init,
					    					buildProject, installProjectOracle,
					    					runFastTests, postBuildWorkspaceClean" />

    <target name="buildPostgres" depends="
		    								init,
					    					buildProject, installProjectPostgres,
					    					runFastTests, postBuildWorkspaceClean" />

    <target name="buildMssql" depends="
		    								init,
					    					buildProject, installProjectMssql,
					    					runFastTests, postBuildWorkspaceClean" />



    <target name="runFastTests">
        <parallel>
            <antcall target="lint" />
            <antcall target="phpunitFast" />
        </parallel>
    </target>

    <target name="runFullTests">
        <parallel>
            <antcall target="lint" />
            <antcall target="phpunit" />
            <antcall target="phpmd-ci" />
            <antcall target="phpcs-ci" />
        </parallel>
    </target>

    <target name="installBuildDependencies">
        <parallel>
            <antcall target="installComposerBuildDependencies" />
            <antcall target="installNpmBuildDependencies" />
        </parallel>
    </target>

    <target name="installComposerBuildDependencies">
        <!--echo>Composer Build Dependencies</echo>
        <echo>Copy composer.json and composer.lock to ${basedir}${tempPath}</echo-->
        <!--<copy todir="${basedir}${buildPath}/composerbuild" overwrite="true"  includeEmptyDirs="true" >-->
            <!--<fileset id="composer.dirs" dir="${basedir}${composerPath}">-->
                <!--<include name="composer.json"/>-->
                <!--<include name="composer.lock"/>-->
            <!--</fileset>-->
        <!--</copy>-->

        <!--echo>Execute composer</echo-->
        <exec dir="${basedir}${composerPath}" executable="${path.composer}" failonerror="on" >
            <arg line=" install"/>
            <arg line=" --no-dev"/>
            <arg line=" --quiet"/>
            <arg if:set="isWindows" line=" --prefer-source"/>
        </exec>
    </target>

    <target name="installNpmBuildDependencies">
        <exec dir="${basedir}" executable="${path.npm}" failonerror="on" outputproperty="npmLog">
            <arg line=" install"/>
        </exec>

        <exec dir="${basedir}" executable="${path.npm}" failonerror="on" outputproperty="npmLog">
            <arg line=" run build "/>
        </exec>
    </target>

    <target name="postBuildWorkspaceClean" description="Deletes some folders created during the build to preserve diskspace">
        <delete dir="${basedir}${tempPath}"/>
        <delete dir="${basedir}${projectPath}"/>
    </target>


    <!-- removes existing folders and creates them again -->
    <target name="cleanFilesystem">
        <delete dir="${basedir}${packagesPath}"/>
        <mkdir  dir="${basedir}${packagesPath}"/>

        <delete dir="${basedir}${tempPath}"/>
        <delete dir="${basedir}${tempPath}/../" />
        <mkdir  dir="${basedir}${tempPath}"/>

        <delete dir="${basedir}${projectPath}"/>
        <mkdir  dir="${basedir}${projectPath}"/>

        <delete dir="${basedir}${buildPath}"/>
        <mkdir  dir="${basedir}${buildPath}"/>
        <mkdir  dir="${basedir}${buildPath}/api"/>
        <mkdir  dir="${basedir}${buildPath}/logs"/>
        <mkdir  dir="${basedir}${buildPath}/coverage"/>
        <mkdir  dir="${basedir}${buildPath}/pdepend"/>
        <mkdir  dir="${basedir}${buildPath}/composerbuild"/>
    </target>


    <!-- possible params: targetDir -->
    <target name="copy2project">
        <copy todir="${targetDir}" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".git"/>
                <exclude name="files/extract/**"/>
                <exclude name="files/cache/**"/>
                <exclude name="project/log/**"/>
                <exclude name="project/dbdumps"/>
                <exclude name="project/temp/**"/>
                <include name="core*/module_*/*/**"/>
                <include name="core*/_debugging/*/**"/>
                <include name="core*/_buildfiles/bin/*/**"/>
                <include name="core*/_buildfiles/*.xml"/>
                <include name="core*/_buildfiles/jstests/*/**"/>
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
                <include name="files/**"/>
                <include name="project/**"/>
                <include name=".htaccess"/>
            </fileset>
        </copy>
    </target>

    <!-- builds the project, aka creates a project out of the sources -->
    <target name="buildProject">
        <antcall target="copy2project">
            <param name="targetDir" value="${basedir}${projectPath}" />
        </antcall>
    </target>

    <!-- creates the full-zip including all modules and elements -->
    <target name="buildFullZip" depends="init" >
        <antcall target="copy2project">
            <param name="targetDir" value="${basedir}${tempPath}" />
        </antcall>

        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f cleanCore.php ${tempPath}"/>
        </exec>

        <antcall target="buildPackageHelper" />
        <antcall target="modulePharHelper" />

        <zip destfile="${basedir}${packagesPath}/build_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>


    <target name="modulePharHelper" description="generates phar files out of the current module structure">
        <exec executable="php" dir="${basedir}${tempPath}/core"  failonerror="on" >
            <arg line="-f generate_phar.php removesource=true"/>
        </exec>

        <delete includeemptydirs="true">
            <fileset dir="${basedir}${tempPath}" includes="**/core/generate_phar.php"/>
        </delete>

    </target>


    <target name="buildPackageHelper" description="triggers the project setup and the compilation / compression of css / js files">
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${tempPath} onlySetup"/>
        </exec>
        <antcall target="cleanZipContent" />
    </target>


    <!-- triggers the installation of the project aka. creating the db-structure -->

    <!-- sqlite3 config file -->
    <target name="installProjectSqlite">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_sqlite3.php"/>
        </exec>
    </target>

    <!-- mysql config file -->
    <target name="installProjectMysql">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_mysql.php"/>
        </exec>
    </target>

    <!-- oracle config file -->
    <target name="installProjectOracle">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_oracle.php"/>
        </exec>
    </target>

    <!-- postgres config file -->
    <target name="installProjectPostgres">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_postgres.php"/>
        </exec>
    </target>

    <!-- mssql config file -->
    <target name="installProjectMssql">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_mssql.php"/>
        </exec>
    </target>

    <target name="cleanZipContent" description="Removes internal files used by the development not to be included into the build zips">
        <delete includeemptydirs="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*.less"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less-full.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/*.odt"/>
            <fileset dir="${basedir}${tempPath}" includes="**/core*/*/tests/**"/>
            <fileset dir="${basedir}${tempPath}" includes="**/core*/*/scripts/spec/**"/>
            <fileset dir="${basedir}${tempPath}" includes="**/setupproject.php"/>
            <fileset dir="${basedir}${tempPath}" includes="**/Jenkinsfile"/>
            <fileset dir="${basedir}${tempPath}" includes="**/V4toV5Migration.php"/>
            <fileset dir="${basedir}${tempPath}" includes="**/.git"/>
            <fileset dir="${basedir}${tempPath}" includes="**/core*/_buildfiles*/**"/>
            <fileset dir="${basedir}${tempPath}" includes="**/core*/_debugging*/**"/>
            <fileset dir="${basedir}${tempPath}" includes="debug.php"/>
            <fileset dir="${basedir}${tempPath}" includes="*.json"/>
        </delete>
    </target>




    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="${path.php}" failonerror="true" output="${basedir}${buildPath}/logs/lint.log">
            <arg value="-l" />

            <fileset dir="${basedir}${projectPath}">
                <include name="**/*.php" />
                <exclude name="**/vendor/**" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="${path.phpmd}">
            <arg path="${basedir}${projectPath}" />
            <arg value="xml" />
            <arg value="--exclude" />
            <arg value="*yui*,*tcpdf*,*fonts*,*pchart*,*vendor*,*phpexcel*,*phpqrcode*" />
            <arg value="--reportfile" />
            <arg value="${basedir}${buildPath}/logs/pmd.xml" />
            <arg value="${basedir}/phpmd-ruleset.xml" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="${path.phpcs}"  output="/dev/null" >
            <arg value="--tab-width=4" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}${buildPath}/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/phpcs-ruleset.xml" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${path.phpunit}" failonerror="true">
            <arg line="--configuration ${basedir}/phpunit.xml " />
        </exec>
    </target>

    <target name="phpunitFast" description="Run unit tests with PHPUnit">
        <exec executable="${path.phpunit}" failonerror="true">
            <arg line="--configuration '${basedir}/phpunit_fast.xml' " />
        </exec>
    </target>

</project>
